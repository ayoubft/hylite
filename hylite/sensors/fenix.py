import numpy as np
from pathlib import Path
import cv2
import numpy.ma as ma
import hylite.io as io
from .sensor import Sensor

class Fenix(Sensor):
    """
    Implementation of sensor corrections for the Fenix sensor.
    """

    cal2 = None
    cal4 = None
    cal8 = None

    @classmethod
    def name(cls):
        """
        Returns this sensors name
        """
        return "FENIX"

    @classmethod
    def fov(cls):
        """
        Return the (vertical) sensor field of view .
        """
        return 32.3

    @classmethod
    def ypixels(cls):
        """
        Return the number of pixels in the y-dimension.
        """
        return 384  # n.b. sensor has 384 pixels but this is resized to 401 on lens correction

    @classmethod
    def xpixels(cls):
        """
        Return the number of pixels in the x-dimension (==1 for line scanners).
        """
        return 1  # the Fenix is a line-scanner

    @classmethod
    def pitch(cls):
        """
        Return the pitch of the each pixel in the y-dimension (though most pixels are square).
        """
        return 0.084

    @classmethod
    def correct_image(cls, image, verbose=True, **kwds):

        """
        Apply sensor corrections to an image.

        *Arguments*:
         - image = a hyImage instance of an image captured using this sensor.
         - verbose = true if updates/progress should be printed to the console. Default is False.
        *Keywords*:
         - rad = true if image should be converted to radiance by applying dark and white references. Default is True.
         - bpr = replace bad pixels (only for raw data). Default is True.
         - shift = shift bands to account for time-delay between their acquisitions.
                   Only use for near-field sensing (e.g. drill-core scans). Default is False.
         - flip = true if image should be flipped before applying lens correction (if camera mounted backwards in core
                  scanner). Default is False.
         - lens = apply GLTX lens correction to remove lens distortion. Default is True.
        """

        # get kwds
        rad = kwds.get("rad", True)
        bpr = kwds.get("bpr", True)
        shift = kwds.get("shift", False)
        lens = kwds.get("lens", True)

        if rad:
            if verbose: print("Converting to radiance... ", end="", flush="True")

            # convert from int to float
            image.data = image.data.astype(np.float32)

            # find saturation and store in mask
            r = image.get_band_index(975.)
            mask = np.ones(image.data.shape)
            mask[..., :r][image.data[..., :r] == 4095.] = np.nan
            mask[..., r:][image.data[..., r:] == 65535.] = np.nan

            # apply dark reference
            if cls.dark is None:
                print("Warning: dark calibration not found; no dark correction was applied! Something smells dodgy...")
            else:
                dref = np.nanmean(cls.dark.data, axis=1)  # calculate dark reference
                image.data[:, :, :] -= dref[:, None, :]  # apply dark calibration

            # apply laboratory calibration
            assert not image.header is None, "Error: image must be linked to a header file (.hdr) for FENIX correction."
            binning = int(image.header.get('binning', [2])[0])
            if image.xdim() == 384:
                if binning == 2:
                    if Fenix.cal2 is None:
                        Fenix.cal2 = io.loadWithGDAL(
                            str(Path(__file__).parent / "calibration_data/fenix/Radiometric_2x2_1x1.hdr"))
                    cal = Fenix.cal2.data[:, 0, :]
                    calw = Fenix.cal2.get_wavelengths()
                elif binning == 4:
                    if Fenix.cal4 is None:
                        Fenix.cal4 = io.loadWithGDAL(
                            str(Path(__file__).parent / "calibration_data/fenix/Radiometric_4x2_1x1.hdr"))
                    cal = Fenix.cal4.data[:, 0, :]
                    calw = Fenix.cal4.get_wavelengths()
                elif binning == 8:
                    if Fenix.cal8 is None:
                        Fenix.cal8 = io.loadWithGDAL(
                            str(Path(__file__).parent / "calibration_data/fenix/Radiometric_8x2_1x1.hdr"))
                    cal = Fenix.cal8.data[:, 0, :]
                    calw = Fenix.cal8.get_wavelengths()
                else:
                    assert False, "Error: calibration data for binning=%d does not exist" % binning
            elif image.xdim() == 1024:
                if binning == 2:
                    if Fenix.cal2 is None:
                        Fenix.cal2 = io.loadWithGDAL(
                            str(Path(__file__).parent / "calibration_data/fenix1k/Radiometric_2x2_1x1.hdr"))
                    cal = Fenix.cal2.data[:, 0, :]
                    calw = Fenix.cal2.get_wavelengths()
                elif binning == 4:
                    if Fenix.cal4 is None:
                        Fenix.cal4 = io.loadWithGDAL(
                            str(Path(__file__).parent / "calibration_data/fenix1k/Radiometric_4x2_1x1.hdr"))
                    cal = Fenix.cal4.data[:, 0, :]
                    calw = Fenix.cal4.get_wavelengths()
                elif binning == 8:
                    if Fenix.cal8 is None:
                        Fenix.cal8 = io.loadWithGDAL(
                            str(Path(__file__).parent / "calibration_data/fenix1k/Radiometric_8x2_1x1.hdr"))
                    cal = Fenix.cal8.data[:, 0, :]
                    calw = Fenix.cal8.get_wavelengths()
                else:
                    assert False, "Error: calibration data for binning=%d does not exist" % binning
            else:
                assert False, "Error: no known Fenix dimensions %d" % image.xdim()

            # convert from saturation to radiance based on laboratory calibration file
            cal = cal[:, [np.argmin(calw < w) for w in
                          image.get_wavelengths()]]  # match image wavelengths to calibration wavelengths
            image.data[:, :, :] *= cal[:, None, :]  # apply to image

            # apply white reference (if specified)
            if not cls.white is None:

                # calculate white reference radiance
                white = np.nanmean(cls.white.data.astype(np.float32),
                                   axis=1) - dref  # average each line and subtract dark reference
                white *= cal  # apply laboratory calibration to white reference

                # extract white (or grey) reference reflectance
                if cls.white_spectra is None:
                    refl = np.zeros(white.shape[1]) + 1.0  # assume pure white
                else:
                    # get known target spectra
                    refl = cls.white_spectra.get_reflectance()

                    # match bands with this image
                    idx = [np.argmin(cls.white_spectra.get_wavelengths() < w) for w in image.get_wavelengths()]
                    refl = refl[idx]

                # apply white reference
                cfac = refl[None, :] / white
                image.data[:, :, :] *= cfac[:, None, :]

            if verbose: print("DONE.")

        ##############################################################
        # replace bad pixels with an average of the surrounding ones
        ##############################################################
        if bpr:
            if verbose: print("Filtering bad pixels... ", end="", flush="True")
            invalids = np.argwhere(np.isnan(image.data) | np.isinf(image.data))  # search for bad pixels
            for px, py, band in invalids:
                n = 0
                sum = 0
                for xx in range(px - 1, px + 2):
                    for yy in range(py - 1, py + 2):
                        if xx == px and yy == py: continue  # skip invalid pixel
                        if xx < 0 or yy < 0 or xx >= image.data.shape[0] or yy >= image.data.shape[
                            1]: continue  # skip out of bounds pixels
                        if image.data[xx][yy][band] == np.nan or image.data[xx][yy][
                            band] == np.inf: continue  # maybe neighbour is nan also
                        n += 1
                        sum += image.data[xx][yy][band]
                if n > 0: sum /= n  # do averaging
                image.data[px][py][band] = sum
            if verbose: print("DONE.")

        ##############################################################
        # apply saturation flag
        ##############################################################
        if rad:
            image.data *= mask

        ######################################################################################
        # sensor alignment - identify tie points and apply rigid transform to second sensor
        ######################################################################################
        if shift:
            if verbose: print("Correcting sensor shift (SIFT)... ", end="", flush="True")

            # extract sift features from a band in each sensor
            m = 'sift'  # matching method
            xp1, des1 = image.get_keypoints(100, method=m)
            xp2, des2 = image.get_keypoints(200, method=m)

            # match features
            src_pts, dst_pts = io.HyImage.match_keypoints(xp1, xp2, des1, des2, method=m)

            # use RANSAC and a homography transform model to discard bad points
            H, status = cv2.findHomography(dst_pts, src_pts, cv2.RANSAC, 3.0)
            dst_mask = dst_pts[:, 0, :] * status
            src_mask = src_pts[:, 0, :] * status
            dst_mask = dst_mask[dst_mask.all(1)]
            src_mask = src_mask[src_mask.all(1)]
            dst_mask = np.expand_dims(dst_mask, axis=1)
            src_mask = np.expand_dims(src_mask, axis=1)

            # estimate translation matrix
            M = cv2.estimateRigidTransform(dst_mask, src_mask, False)

            # transform bands from second sensor (>175)
            r = image.get_band_index(975.)
            for i in range(r, image.band_count()):
                image.data[:, :, i] = cv2.warpAffine(image.data[:, :, i], M, (image.data.shape[1], image.data.shape[0]))

            if verbose: print("DONE.")

        #############################
        # apply lens correction
        #############################
        if lens:
            if verbose: print("Applying lens correction... ", end="", flush="True")

            # load pixel offsets
            if image.xdim() == 1024:
                m = np.array([[0., 1.310606405, 2.623572205, 3.932778376, 5.241288277, 6.546049087, 7.853174105,
                               9.156557267, 10.4592554, 11.75822207, 13.05955768, 14.35716897, 15.65410631, 16.95037166,
                               18.24292644, 19.53785523, 20.82908047, 22.11660878, 23.40651532, 24.69273186,
                               25.97829614, 27.26321008, 28.54747557, 29.82806787, 31.10801854, 32.38732947,
                               33.66600252, 34.94403956, 36.21842334, 37.49217783, 38.76530487, 40.03479164,
                               41.30667079, 42.57491629, 43.84254462, 45.1065488, 46.37294971, 47.63573299, 48.89790925,
                               50.15948028, 51.41744627, 52.67781363, 53.93458238, 55.19075588, 56.44333998,
                               57.69832967, 58.9497363, 60.20055752, 61.45079506, 62.69746176, 63.94653855, 65.19205073,
                               66.43698892, 67.67837143, 68.92216815, 70.16241533, 71.40209808, 72.64121808,
                               73.87977702, 75.1148013, 76.34927056, 77.58318648, 78.81655072, 80.04936495, 81.27866216,
                               82.50741529, 83.73562601, 84.96329593, 86.18746327, 87.41405783, 88.63715565, 89.8597218,
                               91.0787996, 92.30030851, 93.51833484, 94.73583847, 95.952821, 97.16928402, 98.38227843,
                               99.59770845, 100.8096755, 102.0211319, 103.2291334, 104.4395744, 105.6465661,
                               106.8530558, 108.0590451, 109.2615958, 110.4665901, 111.6681514, 112.8692207,
                               114.0697998, 115.26989, 116.4665606, 117.6627477, 118.8584529, 120.0536777, 121.2484236,
                               122.4397656, 123.6335594, 124.8239545, 126.0138791, 127.2004125, 128.3894014,
                               129.5750045, 130.7601452, 131.9448249, 133.1290451, 134.3128072, 135.4931987,
                               136.6731374, 137.8526245, 139.0316616, 140.2102501, 141.385483, 142.5602723, 143.7346196,
                               144.9085261, 146.0819933, 147.2550226, 148.4247136, 149.5939716, 150.7627981,
                               151.9311945, 153.0962645, 154.2638059, 155.4280257, 156.5918232, 157.7551995,
                               158.9181561, 160.077803, 161.237035, 162.3987427, 163.5571479, 164.712255, 165.8698409,
                               167.0241335, 168.1809055, 169.3343888, 170.4874701, 171.6372694, 172.7895515,
                               173.9385562, 175.0900444, 176.23826, 177.3860833, 178.5306406, 179.6776845, 180.8214669,
                               181.9648644, 183.1078781, 184.2505094, 185.3927597, 186.5317616, 187.6732545,
                               188.8115035, 189.9493785, 191.0868807, 192.2240114, 193.3579089, 194.4914394, 195.627465,
                               196.7602641, 197.8926999, 199.0219153, 200.1536291, 201.2821269, 202.4102681,
                               203.5380541, 204.665486, 205.7925652, 206.9192928, 208.0428189, 209.1659977, 210.2888305,
                               211.4113183, 212.5334625, 213.6552643, 214.7738789, 215.8950003, 217.0129387,
                               218.1305412, 219.247809, 220.3619018, 221.4785047, 222.5919366, 223.7050403, 224.8206553,
                               225.9331054, 227.0423941, 228.1541969, 229.2628424, 230.3740025, 231.4820094,
                               232.5896992, 233.697073, 234.804132, 235.9080472, 237.014481, 238.1177748, 239.2207601,
                               240.323438, 241.4258096, 242.5278761, 243.6268139, 244.7282744, 245.8266101, 246.9246468,
                               248.0223857, 249.1198278, 250.2169743, 251.311007, 252.4075665, 253.5010159, 254.5941758,
                               255.6870472, 256.7796312, 257.8719289, 258.9639416, 260.0528568, 261.1443032, 262.232656,
                               263.3207294, 264.4085247, 265.496043, 266.5804762, 267.6674444, 268.7513311, 269.8377536,
                               270.9210982, 272.0041737, 273.0869812, 274.1667176, 275.248993, 276.3310037, 277.4099486,
                               278.4886321, 279.5670555, 280.6452198, 281.7231261, 282.8007753, 283.8781686,
                               284.9525097, 286.0265982, 287.1032315, 288.1768175, 289.2501543, 290.3232428,
                               291.3932906, 292.4658863, 293.5382369, 294.6075518, 295.676625, 296.7454574, 297.8140501,
                               298.8824041, 299.9505205, 301.0184003, 302.0832573, 303.1506676, 304.2150584,
                               305.2792179, 306.3431472, 307.4068472, 308.470319, 309.5335637, 310.5937997, 311.6565936,
                               312.7163821, 313.7787294, 314.8380743, 315.8971994, 316.9561055, 318.0147937, 319.073265,
                               320.128743, 321.1867839, 322.2418348, 323.2966739, 324.3540772, 325.408495, 326.462704,
                               327.5167052, 328.5677266, 329.6213155, 330.6746996, 331.7251085, 332.7753156,
                               333.8280919, 334.8778977, 335.9275045, 336.9769134, 338.0261253, 339.0723736, 340.121195,
                               341.1698223, 342.2154905, 343.2609676, 344.3090196, 345.3541168, 346.3990259,
                               347.4437476, 348.4882831, 349.5298706, 350.5740369, 351.6180197, 352.6590589,
                               353.7026782, 354.7433567, 355.7838566, 356.8241788, 357.8643242, 358.9042938,
                               359.9440885, 360.9837093, 362.0204002, 363.0596764, 364.0960255, 365.1349608,
                               366.1709719, 367.2068155, 368.2424927, 369.2807581, 370.3133514, 371.3485347,
                               372.3835554, 373.4184142, 374.4503605, 375.4848989, 376.5165275, 377.5507492,
                               378.5820638, 379.6132229, 380.6442276, 381.6750787, 382.7057771, 383.7363237,
                               384.7667195, 385.7969654, 386.8270623, 387.8542648, 388.8840668, 389.910977, 390.9377426,
                               391.9671093, 392.9935881, 394.0199251, 395.046121, 396.072177, 397.0980937, 398.1238723,
                               399.1467713, 400.1722763, 401.1976459, 402.2201397, 403.2452412, 404.2674695,
                               405.2895665, 406.3142729, 407.3361097, 408.357818, 409.3793986, 410.4008524, 411.4221803,
                               412.4433832, 413.464462, 414.4826805, 415.503514, 416.5242261, 417.5420815, 418.5625536,
                               419.5801715, 420.5976721, 421.6177911, 422.6350594, 423.6522131, 424.669253, 425.6861799,
                               426.7029949, 427.7196987, 428.7362922, 429.7527763, 430.7691519, 431.7826881,
                               432.7988495, 433.814905, 434.8281246, 435.8439712, 436.8569841, 437.8698952, 438.8854351,
                               439.8981447, 440.9107551, 441.923267, 442.9356814, 443.9479991, 444.9602209, 445.9723478,
                               446.9843806, 447.9963202, 449.0081674, 450.019923, 451.0288612, 452.0404367, 453.0519232,
                               454.0605955, 455.071907, 456.0804064, 457.0915462, 458.0998762, 459.1108478, 460.1190118,
                               461.1270941, 462.1350956, 463.1457412, 464.1535835, 465.1613476, 466.1690343,
                               467.1766444, 468.1841789, 469.1916385, 470.1990241, 471.2063366, 472.2108546,
                               473.2180235, 474.2251218, 475.2321504, 476.2363887, 477.2432804, 478.250105, 479.2541423,
                               480.2608352, 481.2647429, 482.2713074, 483.2750887, 484.2815283, 485.2851866,
                               486.2887849, 487.2950434, 488.2985237, 489.3019464, 490.3080315, 491.3113413, 492.314596,
                               493.3177965, 494.3209436, 495.3267563, 496.3297989, 497.3327905, 498.3357321,
                               499.3386244, 500.3414682, 501.3442645, 502.3470141, 503.3497177, 504.3496592,
                               505.3522736, 506.3548447, 507.3573731, 508.3598599, 509.3623057, 510.3647115,
                               511.3643616, 512.3666899, 513.3689805, 514.3685184, 515.3707365, 516.3729195,
                               517.3750683, 518.374468, 519.3765509, 520.3758866, 521.3779069, 522.3798972, 523.3791429,
                               524.3810756, 525.3802655, 526.3821439, 527.3839964, 528.3831089, 529.3849121, 530.383977,
                               531.3857343, 532.3847551, 533.3864696, 534.3854495, 535.3871248, 536.3860671,
                               537.3877064, 538.3866144, 539.388221, 540.3870981, 541.385961, 542.3875247, 543.3863616,
                               544.3879009, 545.3867151, 546.3882334, 547.3870282, 548.3885286, 549.3873074,
                               550.3887933, 551.3875593, 552.3863201, 553.3877906, 554.3865436, 555.3880079,
                               556.3867564, 557.3882179, 558.3869652, 559.3884271, 560.3871764, 561.3886421,
                               562.3873969, 563.3888696, 564.3876331, 565.3891162, 566.3878917, 567.3893885,
                               568.3908934, 569.3896931, 570.3912167, 571.3900367, 572.3915823, 573.3904259,
                               574.3919968, 575.3935816, 576.3924668, 577.3940819, 578.3957134, 579.3973622,
                               580.3963144, 581.3980001, 582.3997054, 583.3987167, 584.4004639, 585.4022335, 586.404026,
                               587.4058425, 588.4076836, 589.4095504, 590.4087283, 591.4106485, 592.4125968, 593.414574,
                               594.4165808, 595.4186182, 596.420687, 597.422788, 598.4249221, 599.4298059, 600.4320086,
                               601.4342469, 602.4365215, 603.4388334, 604.4438997, 605.4462886, 606.4487172,
                               607.4539031, 608.4564137, 609.4589665, 610.4642795, 611.4669194, 612.4723214,
                               613.4750517, 614.480546, 615.48337, 616.48896, 617.4945992, 618.4975702, 619.5033101,
                               620.5091017, 621.5149458, 622.5181246, 623.5240762, 624.5300829, 625.5361455,
                               626.5422648, 627.5484417, 628.5546771, 629.5609717, 630.5700464, 631.5764624,
                               632.5829401, 633.5894805, 634.5988051, 635.6054735, 636.6122072, 637.6217281,
                               638.6285949, 639.638251, 640.6452543, 641.655049, 642.6649144, 643.672129, 644.6821381,
                               645.6922204, 646.7023768, 647.7126082, 648.7229153, 649.7332991, 650.7437605,
                               651.7543002, 652.7649191, 653.7756181, 654.7891227, 655.7999847, 656.8109293,
                               657.8246827, 658.8357955, 659.8497192, 660.8610035, 661.8751009, 662.8892867,
                               663.9035616, 664.9151996, 665.9296552, 666.9442026, 667.9588425, 668.973576, 669.9884038,
                               671.0060553, 672.0210747, 673.0361911, 674.0514053, 675.0694478, 676.0848606,
                               677.1031038, 678.121449, 679.1371663, 680.1557175, 681.1743733, 682.1931345, 683.2120019,
                               684.2309764, 685.250059, 686.2692506, 687.2885519, 688.3079638, 689.3302208, 690.3498571,
                               691.3723408, 692.3922049, 693.4149188, 694.4377493, 695.457962, 696.4810281, 697.5042134,
                               698.5275189, 699.5509455, 700.5744941, 701.6009027, 702.6246982, 703.6486183,
                               704.6754022, 705.6995747, 706.7266134, 707.753781, 708.7783388, 709.8057667, 710.8333261,
                               711.8610181, 712.8888436, 713.9168034, 714.9476402, 715.9758718, 717.0042405, 718.03549,
                               719.0668792, 720.0956653, 721.1273361, 722.1591493, 723.1911058, 724.2232066,
                               725.2554525, 726.2878444, 727.3203834, 728.3558169, 729.388653, 730.4243863, 731.4575232,
                               732.49356, 733.5297502, 734.5660946, 735.6025942, 736.63925, 737.6760628, 738.7130336,
                               739.7529146, 740.7902047, 741.8304076, 742.8680207, 743.9085493, 744.9492425,
                               745.9901011, 747.0311261, 748.0723184, 749.113679, 750.1579644, 751.1996648, 752.2442929,
                               753.2863369, 754.3313115, 755.3764609, 756.4217862, 757.4672883, 758.5129682,
                               759.5588268, 760.6076254, 761.6538448, 762.7030071, 763.7495913, 764.7991212,
                               765.8488366, 766.8987384, 767.9488277, 768.9991054, 770.0495726, 771.1029952,
                               772.1538445, 773.2076524, 774.2616545, 775.315852, 776.3702457, 777.4248368, 778.4796261,
                               779.5346147, 780.5925733, 781.6479639, 782.7063276, 783.7621242, 784.8208969, 785.879876,
                               786.9390624, 788.0012306, 789.0608351, 790.1206499, 791.1834513, 792.2464661,
                               793.3096954, 794.3703632, 795.4368013, 796.5006801, 797.5647773, 798.6290941,
                               799.6964112, 800.7639511, 801.8289338, 802.8969216, 803.9651353, 805.0363585,
                               806.1050275, 807.1739254, 808.2458378, 809.3151973, 810.3875746, 811.4601861, 812.533033,
                               813.6061162, 814.6822251, 815.7557849, 816.8323736, 817.9064141, 818.9834869,
                               820.0608037, 821.1383655, 822.2161733, 823.2970216, 824.3753254, 825.456673, 826.5382723,
                               827.6201242, 828.70223, 829.7845906, 830.8672072, 831.9500808, 833.0360116, 834.122203,
                               835.2086559, 836.2953716, 837.3823511, 838.4695954, 839.5571058, 840.6476871,
                               841.7385381, 842.8296596, 843.921053, 845.0127193, 846.1046595, 847.1968749, 848.2921753,
                               849.3877544, 850.4808032, 851.5769426, 852.6761757, 853.7728812, 854.869871, 855.9699603,
                               857.0703376, 858.1710042, 859.2719612, 860.3732098, 861.474751, 862.5794044, 863.6815351,
                               864.7867819, 865.8923274, 866.9981729, 868.1043195, 869.2135912, 870.3203443,
                               871.4302264, 872.5404158, 873.6509137, 874.7617213, 875.8728397, 876.9870985,
                               878.1016722, 879.2137317, 880.3289377, 881.4444621, 882.5631384, 883.6793038,
                               884.7986253, 885.9182716, 887.0382438, 888.1585432, 889.279171, 890.4001285, 891.5242558,
                               892.6487169, 893.7735129, 894.8986451, 896.0241146, 897.1499228, 898.2789151,
                               899.4082501, 900.5379292, 901.6679536, 902.7983246, 903.9318919, 905.0629605,
                               906.1972297, 907.3318523, 908.4668294, 909.6021623, 910.7407063, 911.8767556,
                               913.0160202, 914.1556476, 915.2956389, 916.438854, 917.5795781, 918.7235304, 919.8678536,
                               921.0125492, 922.1576182, 923.3030622, 924.4517474, 925.6008119, 926.7502571,
                               927.9000843, 929.0502948, 930.2037598, 931.3547419, 932.508983, 933.6636146, 934.8186382,
                               935.9769296, 937.1327419, 938.2918267, 939.4513108, 940.6111955, 941.7743617,
                               942.9350526, 944.0990298, 945.263415, 946.4282097, 947.5934151, 948.7590328, 949.9279506,
                               951.0972855, 952.2670388, 953.4372118, 954.6106969, 955.7817147, 956.9560495,
                               958.1308117, 959.3060028, 960.4845204, 961.6605746, 962.8399603, 964.0197827,
                               965.2000432, 966.3807433, 967.564787, 968.7492754, 969.9342099, 971.119592, 972.305423,
                               973.4946126, 974.6813472, 975.8714455, 977.0649123, 978.2559273, 979.4503162, 980.642254,
                               981.8375707, 983.0333543, 984.2325244, 985.4292472, 986.6293619, 987.8299516, 989.031018,
                               990.2354866, 991.437512, 992.6429449, 993.848863, 995.0552677, 996.2650905, 997.4754054,
                               998.6832816, 999.8975177, 1001.109318, 1002.321617, 1003.537353, 1004.753593,
                               1005.970338, 1007.187591, 1008.408294, 1009.62951, 1010.851241, 1012.073487, 1013.299198,
                               1014.522482, 1015.749237, 1016.976516, 1018.204322, 1019.43561, 1020.66743, 1021.899785,
                               1023.132674, 1024.366102, 1025.603028, 1026.840497, 1028.078511, 1029.317072,
                               1030.559147, 1031.798807, 1033.041987, 1034.288692, 1035.532987, 1036.780813,
                               1038.029203, 1039.278159, 1040.527682, 1041.780751, 1043.031415, 1044.285631,
                               1045.543406, 1046.798779, 1048.057717, 1049.31724, 1050.57735, 1051.838048, 1053.102327,
                               1054.3672, 1055.63267, 1056.898738, 1058.168402, 1059.438672, 1060.709548, 1061.981032,
                               1063.256129, 1064.528838, 1065.805165, 1067.085116, 1068.362684, 1069.643884, 1070.92571,
                               1072.208166, 1073.491254, 1074.777988, 1076.065361, 1077.353373, 1078.645046,
                               1079.934346, 1081.227313, 1082.520931, 1083.818225, 1085.113152, 1086.411762,
                               1087.711034, 1089.014, 1090.314602, 1091.618906, 1092.923882, 1094.23257, 1095.538899,
                               1096.848946, 1098.159677, 1099.474138, 1100.786244, 1102.102086, 1103.418624,
                               1104.738908, 1106.056843, 1107.378533, 1108.700929, 1110.02709, 1111.350907, 1112.678496,
                               1114.006803, 1115.338894, 1116.67171, 1118.005255, 1119.339529, 1120.674535, 1122.013347,
                               1123.352898, 1124.693192, 1126.037306, 1127.379092, 1128.724706],
                              [76.23446103 , 75.86175552 , 75.49177908 , 75.1245315 , 74.75457202 , 74.39006137 , 74.02283875 , 73.66106451 , 73.29657822 , 72.93481991 , 72.57578939 , 72.21676658 , 71.86047124 , 71.50418343 , 71.14790311 , 70.79434986 , 70.44080391 , 70.08998473 , 69.73917267 , 69.3883677 , 69.04300844 , 68.6949367 , 68.34959106 , 68.00425216 , 67.66163907 , 67.31903254 , 66.97915155 , 66.63927695 , 66.30212763 , 65.96498453 , 65.62784762 , 65.29343564 , 64.95902969 , 64.62734841 , 64.295673 , 63.96672201 , 63.63505821 , 63.30883715 , 62.98262166 , 62.6564117 , 62.3329256 , 62.00944488 , 61.68596953 , 61.36521771 , 61.04447111 , 60.72644782 , 60.4084296 , 60.09313447 , 59.77784427 , 59.46255898 , 59.14999649 , 58.83743877 , 58.52760362 , 58.21777312 , 57.90794724 , 57.60084365 , 57.29374456 , 56.98936755 , 56.68499491 , 56.38334416 , 56.07898014 , 55.78005536 , 55.47841726 , 55.17950073 , 54.88330564 , 54.58711453 , 54.29092738 , 53.99746142 , 53.7039993 , 53.410541 , 53.11980366 , 52.82907002 , 52.54105716 , 52.2530479 , 51.96504222 , 51.67975709 , 51.39447543 , 51.10919723 , 50.82663935 , 50.54408483 , 50.26425046 , 49.98441934 , 49.70730822 , 49.42748352 , 49.15309541 , 48.8759937 , 48.60161173 , 48.32723277 , 48.05557341 , 47.78391697 , 47.51226345 , 47.24332932 , 46.97439801 , 46.70818594 , 46.44197661 , 46.17577 , 45.91228245 , 45.64879753 , 45.38531523 , 45.1245518 , 44.86379091 , 44.60303254 , 44.34499288 , 44.08695565 , 43.83163699 , 43.57632069 , 43.32100674 , 43.06569513 , 42.81310188 , 42.56322691 , 42.31063813 , 42.06076756 , 41.81361511 , 41.56374885 , 41.31660063 , 41.07217038 , 40.82774216 , 40.58331595 , 40.33889175 , 40.09718533 , 39.85548085 , 39.61649404 , 39.37479337 , 39.13852602 , 38.89954478 , 38.66328105 , 38.42701911 , 38.19347455 , 37.95993173 , 37.72639061 , 37.49285119 , 37.26202901 , 37.03120847 , 36.80310507 , 36.57500325 , 36.34690301 , 36.12151978 , 35.89613806 , 35.67075786 , 35.44537915 , 35.22271731 , 35.00005691 , 34.78011329 , 34.56017107 , 34.34023022 , 34.12029075 , 33.90306792 , 33.68584641 , 33.47134146 , 33.25683779 , 33.04233538 , 32.82783422 , 32.6160495 , 32.40426599 , 32.19248367 , 31.98341769 , 31.77435286 , 31.56528918 , 31.35894173 , 31.15259539 , 30.94625014 , 30.74262103 , 30.53899297 , 30.33536596 , 30.13173999 , 29.93083004 , 29.7299211 , 29.53172811 , 29.33353608 , 29.135345 , 28.93715487 , 28.7416806 , 28.54620723 , 28.35073476 , 28.15526319 , 27.96250738 , 27.77246727 , 27.57971315 , 27.38967471 , 27.19963709 , 27.00960028 , 26.82227907 , 26.63495864 , 26.44763898 , 26.26303485 , 26.07571671 , 25.89382881 , 25.70922688 , 25.5273404 , 25.34545462 , 25.16356953 , 24.98439981 , 24.80523076 , 24.62606237 , 24.44689463 , 24.27044219 , 24.09399037 , 23.91753917 , 23.74380321 , 23.57006784 , 23.39633306 , 23.22259886 , 23.05157983 , 22.88056135 , 22.712258 , 22.54124062 , 22.37293833 , 22.20463656 , 22.03904985 , 21.87074911 , 21.70516341 , 21.5422927 , 21.37670796 , 21.2138382 , 21.05096891 , 20.88810008 , 20.72794617 , 20.56779271 , 20.40763968 , 20.24748708 , 20.09004936 , 19.93261204 , 19.77517514 , 19.62045305 , 19.46573136 , 19.31101005 , 19.15628913 , 19.00428297 , 18.85227718 , 18.70027175 , 18.54826668 , 18.39897633 , 18.24968631 , 18.10039664 , 17.9511073 , 17.80453263 , 17.65795827 , 17.51138423 , 17.36752483 , 17.22366573 , 17.07980692 , 16.9359484 , 16.79209017 , 16.65094653 , 16.50980316 , 16.36866006 , 16.23023152 , 16.09180323 , 15.9533752 , 15.81494742 , 15.67923416 , 15.54352113 , 15.40780834 , 15.27209578 , 15.1390977 , 15.00338561 , 14.87038798 , 14.74010479 , 14.60710759 , 14.47682482 , 14.34654225 , 14.2189741 , 14.08869193 , 13.96112417 , 13.83355659 , 13.7059892 , 13.58113619 , 13.45628335 , 13.33143069 , 13.2065782 , 13.08172588 , 12.9595879 , 12.83745008 , 12.71531242 , 12.59588908 , 12.4764659 , 12.35704285 , 12.23761996 , 12.11819721 , 12.00148875 , 11.88478042 , 11.76807223 , 11.65136417 , 11.53737038 , 11.42337672 , 11.30938317 , 11.19538975 , 11.08411057 , 10.97283151 , 10.86155256 , 10.75027372 , 10.63899499 , 10.53043048 , 10.42186607 , 10.31330177 , 10.20745167 , 10.09888756 , 9.993037648 , 9.88718783 , 9.784052199 , 9.678202561 , 9.575067103 , 9.471931729 , 9.368796439 , 9.268375314 , 9.165240185 , 9.064819216 , 8.9671124 , 8.86669158 , 8.768984906 , 8.668564231 , 8.570857697 , 8.475865299 , 8.378158898 , 8.283166627 , 8.188174418 , 8.09318227 , 7.998190182 , 7.905912212 , 7.813634296 , 7.721356436 , 7.629078631 , 7.536800879 , 7.447237229 , 7.357673629 , 7.268110078 , 7.181260619 , 7.091697162 , 7.004847795 , 6.91799847 , 6.831149189 , 6.744299951 , 6.660164791 , 6.576029671 , 6.491894589 , 6.407759545 , 6.32633857 , 6.242203599 , 6.160782695 , 6.082075852 , 6.000655014 , 5.919234208 , 5.84052746 , 5.761820742 , 5.683114054 , 5.607121416 , 5.528414785 , 5.452422202 , 5.376429645 , 5.300437113 , 5.227158625 , 5.15388016 , 5.077887702 , 5.004609283 , 4.934044901 , 4.860766525 , 4.790202184 , 4.719637863 , 4.649073561 , 4.578509278 , 4.510659023 , 4.440094777 , 4.372244558 , 4.304394355 , 4.239258176 , 4.171408005 , 4.106271856 , 4.041135721 , 3.9759996 , 3.910863494 , 3.848441405 , 3.786019328 , 3.723597263 , 3.66117521 , 3.59875317 , 3.539045141 , 3.476623123 , 3.416915116 , 3.359921119 , 3.300213131 , 3.240505153 , 3.183511183 , 3.126517222 , 3.069523269 , 3.015243321 , 2.958249384 , 2.903969452 , 2.849689526 , 2.795409608 , 2.741129696 , 2.689563786 , 2.637997882 , 2.586431984 , 2.534866091 , 2.483300204 , 2.431734323 , 2.38288244 , 2.334030562 , 2.285178688 , 2.236326819 , 2.190188947 , 2.144051078 , 2.097913214 , 2.051775353 , 2.005637495 , 1.959499642 , 1.916075782 , 1.872651926 , 1.829228073 , 1.785804222 , 1.745094365 , 1.70167052 , 1.660960668 , 1.620250818 , 1.57954097 , 1.541545114 , 1.50083527 , 1.462839417 , 1.424843567 , 1.386847718 , 1.348851871 , 1.313570014 , 1.278288159 , 1.240292316 , 1.207724452 , 1.1724426 , 1.13716075 , 1.104592889 , 1.07202503 , 1.039457171 , 1.006889313 , 0.977035444 , 0.944467588 , 0.91461372 , 0.884759853 , 0.854905987 , 0.825052121 , 0.797912244 , 0.770772367 , 0.743632491 , 0.716492615 , 0.68935274 , 0.664926852 , 0.637786978 , 0.613361091 , 0.588935204 , 0.564509318 , 0.542797419 , 0.518371534 , 0.496659635 , 0.474947737 , 0.45323584 , 0.434237929 , 0.412526032 , 0.393528121 , 0.374530211 , 0.355532301 , 0.336534392 , 0.320250469 , 0.301252559 , 0.284968637 , 0.268684714 , 0.255114779 , 0.238830857 , 0.222546934 , 0.208976999 , 0.195407064 , 0.181837129 , 0.170981181 , 0.157411246 , 0.146555298 , 0.13569935 , 0.124843402 , 0.113987454 , 0.103131506 , 0.094989545 , 0.086847584 , 0.078705623 , 0.070563662 , 0.062421701 , 0.056993727 , 0.051565753 , 0.046137779 , 0.040709805 , 0.035281831 , 0.029853857 , 0.02713987 , 0.024425883 , 0.021711896 , 0.018997909 , 0.016283922 , 0.016283922 , 0.016283922 , 0.016283922 , 0.016283922 , 0.016283922 , 0.016283922 , 0.018997909 , 0.021711896 , 0.024425883 , 0.02713987 , 0.032567844 , 0.035281831 , 0.040709805 , 0.046137779 , 0.051565753 , 0.056993727 , 0.065135688 , 0.073277649 , 0.078705623 , 0.086847584 , 0.097703532 , 0.105845493 , 0.116701441 , 0.124843402 , 0.13569935 , 0.149269285 , 0.160125233 , 0.170981181 , 0.184551116 , 0.198121051 , 0.211690986 , 0.225260921 , 0.241544844 , 0.255114779 , 0.271398701 , 0.287682624 , 0.303966546 , 0.322964456 , 0.339248379 , 0.358246289 , 0.377244199 , 0.396242109 , 0.415240019 , 0.436951916 , 0.458663814 , 0.477661725 , 0.499373623 , 0.523799508 , 0.545511407 , 0.569937293 , 0.591649192 , 0.616075078 , 0.643214953 , 0.66764084 , 0.692066727 , 0.719206603 , 0.746346479 , 0.773486355 , 0.800626232 , 0.830480097 , 0.857619975 , 0.887473841 , 0.917327708 , 0.947181576 , 0.979749432 , 1.009603301 , 1.042171159 , 1.074739018 , 1.107306878 , 1.142588727 , 1.175156589 , 1.210438441 , 1.245720293 , 1.281002148 , 1.316284003 , 1.354279849 , 1.389561707 , 1.427557556 , 1.465553407 , 1.503549259 , 1.544259103 , 1.582254959 , 1.622964807 , 1.663674658 , 1.70438451 , 1.747808356 , 1.788518213 , 1.831942064 , 1.875365917 , 1.918789774 , 1.962213633 , 2.008351487 , 2.051775353 , 2.097913214 , 2.144051078 , 2.192902939 , 2.239040812 , 2.287892681 , 2.336744555 , 2.385596433 , 2.434448316 , 2.483300204 , 2.534866091 , 2.586431984 , 2.637997882 , 2.689563786 , 2.741129696 , 2.795409608 , 2.849689526 , 2.903969452 , 2.958249384 , 3.012529324 , 3.069523269 , 3.126517222 , 3.183511183 , 3.240505153 , 3.297499132 , 3.357207119 , 3.416915116 , 3.476623123 , 3.53633114 , 3.596039168 , 3.658461208 , 3.718169258 , 3.780591322 , 3.843013397 , 3.90814949 , 3.970571591 , 4.03570771 , 4.100843844 , 4.165979992 , 4.233830162 , 4.29896634 , 4.366816541 , 4.434666759 , 4.502516994 , 4.570367246 , 4.640931527 , 4.711495827 , 4.782060146 , 4.852624485 , 4.923188844 , 4.996467238 , 5.069745654 , 5.143024093 , 5.216302555 , 5.28958104 , 5.365573567 , 5.441566121 , 5.5175587 , 5.593551305 , 5.669543938 , 5.748250621 , 5.826957334 , 5.905664077 , 5.98437085 , 6.065791682 , 6.144498518 , 6.225919416 , 6.307340348 , 6.391475347 , 6.47289635 , 6.557031423 , 6.641166535 , 6.725301686 , 6.809436876 , 6.896286146 , 6.983135459 , 7.069984816 , 7.156834217 , 7.243683663 , 7.333247201 , 7.422810788 , 7.512374424 , 7.60193811 , 7.6942159 , 7.783779689 , 7.876057586 , 7.971049597 , 8.063327607 , 8.158319736 , 8.250597862 , 8.345590112 , 8.443296491 , 8.538288868 , 8.635995379 , 8.733701958 , 8.831408606 , 8.929115324 , 9.029536191 , 9.129957133 , 9.230378152 , 9.330799247 , 9.43122042 , 9.534355761 , 9.637491186 , 9.740626696 , 9.843762291 , 9.949612071 , 10.05546194 , 10.16131191 , 10.26716197 , 10.37301212 , 10.48157648 , 10.59014095 , 10.69870551 , 10.8099843 , 10.91854908 , 11.02982809 , 11.14110721 , 11.25510058 , 11.36637993 , 11.48037353 , 11.59436726 , 11.70836112 , 11.82506924 , 11.93906335 , 12.05577173 , 12.17248026 , 12.29190307 , 12.40861188 , 12.52803498 , 12.64745823 , 12.76959581 , 12.88901936 , 13.01115725 , 13.13329529 , 13.2554335 , 13.38028606 , 13.50513879 , 13.6299917 , 13.75484478 , 13.88241224 , 14.00726568 , 14.13483351 , 14.26511575 , 14.39268397 , 14.52296661 , 14.65324945 , 14.7835325 , 14.91381575 , 15.04681345 , 15.17981138 , 15.31280953 , 15.4458079 , 15.58152075 , 15.71723385 , 15.85294718 , 15.99137503 , 16.12708885 , 16.2655172 , 16.40394581 , 16.54508898 , 16.68623241 , 16.82466182 , 16.96852011 , 17.10966438 , 17.25352325 , 17.39738242 , 17.54124188 , 17.68510165 , 17.83167606 , 17.97825079 , 18.12482584 , 18.27411557 , 18.42069127 , 18.56998167 , 18.72198679 , 18.87127789 , 19.02328372 , 19.17528992 , 19.32729649 , 19.48201784 , 19.63673957 , 19.79146169 , 19.94618421 , 20.10362156 , 20.26105932 , 20.4184975 , 20.57593609 , 20.73608958 , 20.89624351 , 21.05639788 , 21.21926719 , 21.38213696 , 21.54500721 , 21.70787792 , 21.87074911 , 22.03633532 , 22.20192202 , 22.37022378 , 22.53852606 , 22.70682887 , 22.87513221 , 23.04343608 , 23.21445509 , 23.38547466 , 23.55649479 , 23.73023011 , 23.90396603 , 24.07770254 , 24.2541543 , 24.42789203 , 24.60434503 , 24.78351335 , 24.95996763 , 25.13913725 , 25.31830755 , 25.50019323 , 25.6820796 , 25.86396668 , 26.04585447 , 26.23045773 , 26.41234696 , 26.59966647 , 26.78427197 , 26.97159302 , 27.15891485 , 27.34623747 , 27.53627572 , 27.7263148 , 27.9163547 , 28.10911031 , 28.2991519 , 28.49462413 , 28.68738235 , 28.88285637 , 29.07833131 , 29.27380716 , 29.4719989 , 29.6701916 , 29.86838526 , 30.0665799 , 30.26749052 , 30.46840215 , 30.67202985 , 30.87294353 , 31.07657332 , 31.28291926 , 31.48926631 , 31.69289934 , 31.90196372 , 32.10831411 , 32.31738079 , 32.52644864 , 32.73823285 , 32.95001827 , 33.16180492 , 33.37630803 , 33.58809716 , 33.80260281 , 34.01982503 , 34.23704857 , 34.45427345 , 34.67149968 , 34.89144261 , 35.11138693 , 35.33133266 , 35.55399521 , 35.77665921 , 35.99932469 , 36.22470709 , 36.45009102 , 36.67547648 , 36.90357899 , 37.12896756 , 37.35978879 , 37.5878961 , 37.81872061 , 38.05226241 , 38.28309028 , 38.5166355 , 38.75018245 , 38.98644684 , 39.22271303 , 39.45898103 , 39.6979666 , 39.93695405 , 40.17594339 , 40.41765044 , 40.65935944 , 40.90107041 , 41.14549924 , 41.3899301 , 41.63436301 , 41.88151393 , 42.12866696 , 42.37582212 , 42.62569544 , 42.87557097 , 43.1254487 , 43.37804476 , 43.63064311 , 43.88595991 , 44.1385629 , 44.39660061 , 44.65192455 , 44.90996713 , 45.16801219 , 45.42877604 , 45.68954245 , 45.95031141 , 46.21379935 , 46.47728994 , 46.74078319 , 47.00699559 , 47.27321075 , 47.5421452 , 47.81108248 , 48.08002263 , 48.34896565 , 48.6206282 , 48.89501039 , 49.16667891 , 49.44106717 , 49.71817526 , 49.99528651 , 50.27240093 , 50.54951854 , 50.82935624 , 51.11191415 , 51.39175848 , 51.67432312 , 51.95960819 , 52.24489675 , 52.53018882 , 52.81548443 , 53.10350074 , 53.39423787 , 53.68497874 , 53.97572335 , 54.26647173 , 54.55994123 , 54.85341461 , 55.1496093 , 55.44580798 , 55.74472816 , 56.04093494 , 56.34258088 , 56.64151346 , 56.94316785 , 57.24754419 , 57.55192491 , 57.85631004 , 58.16069959 , 58.46781141 , 58.77764566 , 59.08748456 , 59.39732815 , 59.70989444 , 60.02246555 , 60.3350415 , 60.65034044 , 60.96564435 , 61.28367147 , 61.60170371 , 61.9197411 , 62.24050199 , 62.56398655 , 62.88475809 , 63.20825345 , 63.53447279 , 63.86069771 , 64.18692824 , 64.51588307 , 64.84484366 , 65.17652881 , 65.50821987 , 65.84263574 , 66.17705769 , 66.51148575 , 66.84863895 , 67.18579843 , 67.52568331 , 67.86557464 , 68.20547244 , 68.548096 , 68.89072621 , 69.23608246 , 69.58416495 , 69.92953492 , 70.27763131 , 70.62845432 , 70.97928449 , 71.33012188 , 71.68368628 , 72.03725806 , 72.39355715 , 72.74986383 , 73.10889811 , 73.46794017 , 73.82971016 , 74.19148811 , 74.55327408 , 74.91778839 , 75.28231092 , 75.6495621 , 76.01682171 , 76.38681032 , 76.75680755 , 77.12953412 , 77.50226953 , 77.87501382 , 78.2504879 , 78.62869201 , 79.00690539 , 79.3851281 , 79.76608131 , 80.14704407 , 80.53073769 , 80.91444109 , 81.30087572 , 81.68732036 , 82.07649662 , 82.46568313 , 82.85760164 , 83.24953064 , 83.64147019 , 84.03886416 , 84.43354709 , 84.83096293 , 85.23111197 , 85.63127225 , 86.03144384 , 86.43434917 , 86.83726607 , 87.24291711 , 87.65130261 , 88.05970016 , 88.46810982 , 88.8792545 , 89.29041157 , 89.70430409]
                              ]).T
            elif image.xdim() == 384:
                '''
                # old calib
                m = np.array([[0.0, 1.14, 2.28, 3.41, 4.55, 5.68, 6.81, 7.94, 9.07, 10.19, 11.32, 12.44, 13.56, 14.68,
                               15.8, 16.92, 18.03, 19.15, 20.26, 21.37, 22.48, 23.59, 24.69, 25.8, 26.9, 28.0, 29.11,
                               30.21, 31.3, 32.4, 33.5, 34.59, 35.68, 36.78, 37.87, 38.95, 40.04, 41.13, 42.21, 43.3,
                               44.38, 45.46, 46.54, 47.62, 48.7, 49.78, 50.85, 51.93, 53.0, 54.07, 55.14, 56.21, 57.28,
                               58.35, 59.42, 60.48, 61.54, 62.61, 63.67, 64.73, 65.79, 66.85, 67.91, 68.97, 70.02,
                               71.08, 72.13, 73.18, 74.24, 75.29, 76.34, 77.39, 78.44, 79.48, 80.53, 81.58, 82.62,
                               83.67, 84.71, 85.75, 86.79, 87.83, 88.87, 89.91, 90.95, 91.99, 93.02, 94.06, 95.1, 96.13,
                               97.16, 98.2, 99.23, 100.26, 101.29, 102.32, 103.35, 104.38, 105.41, 106.43, 107.46,
                               108.48, 109.51, 110.53, 111.56, 112.58, 113.6, 114.63, 115.65, 116.67, 117.69, 118.71,
                               119.73, 120.75, 121.76, 122.78, 123.8, 124.81, 125.83, 126.84, 127.86, 128.87, 129.89,
                               130.9, 131.91, 132.93, 133.94, 134.95, 135.96, 136.97, 137.98, 138.99, 140.0, 141.01,
                               142.02, 143.03, 144.03, 145.04, 146.05, 147.05, 148.06, 149.07, 150.07, 151.08, 152.08,
                               153.09, 154.09, 155.09, 156.1, 157.1, 158.1, 159.11, 160.11, 161.11, 162.11, 163.12,
                               164.12, 165.12, 166.12, 167.12, 168.12, 169.12, 170.12, 171.12, 172.12, 173.12, 174.12,
                               175.12, 176.12, 177.12, 178.12, 179.12, 180.12, 181.12, 182.12, 183.12, 184.12, 185.11,
                               186.11, 187.11, 188.11, 189.11, 190.11, 191.1, 192.1, 193.1, 194.1, 195.1, 196.1, 197.09,
                               198.09, 199.09, 200.09, 201.09, 202.09, 203.08, 204.08, 205.08, 206.08, 207.08, 208.08,
                               209.08, 210.08, 211.08, 212.08, 213.07, 214.08, 215.07, 216.07, 217.08, 218.07, 219.08,
                               220.08, 221.08, 222.08, 223.08, 224.08, 225.08, 226.08, 227.09, 228.09, 229.09, 230.09,
                               231.1, 232.1, 233.11, 234.11, 235.11, 236.12, 237.12, 238.13, 239.13, 240.14, 241.15,
                               242.15, 243.16, 244.17, 245.17, 246.18, 247.19, 248.2, 249.21, 250.22, 251.23, 252.24,
                               253.25, 254.26, 255.27, 256.29, 257.3, 258.31, 259.32, 260.34, 261.35, 262.37, 263.38,
                               264.4, 265.42, 266.43, 267.45, 268.47, 269.49, 270.51, 271.53, 272.55, 273.57, 274.59,
                               275.61, 276.63, 277.66, 278.68, 279.71, 280.73, 281.76, 282.78, 283.81, 284.84, 285.87,
                               286.9, 287.93, 288.96, 289.99, 291.02, 292.05, 293.09, 294.12, 295.15, 296.19, 297.23,
                               298.26, 299.3, 300.34, 301.38, 302.42, 303.46, 304.5, 305.55, 306.59, 307.63, 308.68,
                               309.73, 310.77, 311.82, 312.87, 313.92, 314.97, 316.02, 317.07, 318.13, 319.18, 320.24,
                               321.29, 322.35, 323.41, 324.47, 325.53, 326.59, 327.65, 328.71, 329.78, 330.84, 331.91,
                               332.98, 334.04, 335.11, 336.18, 337.25, 338.33, 339.4, 340.47, 341.55, 342.63, 343.7,
                               344.78, 345.86, 346.95, 348.03, 349.11, 350.2, 351.28, 352.37, 353.46, 354.55, 355.64,
                               356.73, 357.83, 358.92, 360.02, 361.11, 362.21, 363.31, 364.41, 365.52, 366.62, 367.73,
                               368.83, 369.94, 371.05, 372.16, 373.27, 374.39, 375.5, 376.62, 377.74, 378.86, 379.98,
                               381.1, 382.22, 383.35, 384.47, 385.6, 386.73, 387.86, 389.0, 390.13, 391.27, 392.4,
                               393.54, 394.68, 395.82, 396.97, 398.11, 399.26, 400.41],
                              [11.82, 11.64, 11.46, 11.28, 11.1, 10.93, 10.76, 10.58, 10.41, 10.24, 10.07, 9.91, 9.74,
                               9.58, 9.41, 9.25, 9.09, 8.93, 8.77, 8.61, 8.45, 8.3, 8.15, 7.99, 7.84, 7.69, 7.54, 7.39,
                               7.24, 7.1, 6.95, 6.81, 6.67, 6.53, 6.39, 6.25, 6.11, 5.97, 5.84, 5.7, 5.57, 5.44, 5.3,
                               5.17, 5.05, 4.92, 4.79, 4.66, 4.54, 4.42, 4.29, 4.17, 4.05, 3.93, 3.81, 3.7, 3.58, 3.46,
                               3.35, 3.24, 3.12, 3.01, 2.9, 2.79, 2.69, 2.58, 2.47, 2.37, 2.26, 2.16, 2.06, 1.96, 1.86,
                               1.76, 1.66, 1.56, 1.47, 1.37, 1.28, 1.18, 1.09, 1.0, 0.91, 0.82, 0.73, 0.64, 0.56, 0.47,
                               0.39, 0.3, 0.22, 0.14, 0.06, -0.02, -0.1, -0.18, -0.26, -0.33, -0.41, -0.48, -0.56,
                               -0.63, -0.7, -0.77, -0.84, -0.91, -0.98, -1.05, -1.11, -1.18, -1.24, -1.31, -1.37, -1.43,
                               -1.49, -1.55, -1.61, -1.67, -1.73, -1.79, -1.84, -1.9, -1.95, -2.0, -2.06, -2.11, -2.16,
                               -2.21, -2.26, -2.31, -2.35, -2.4, -2.45, -2.49, -2.53, -2.58, -2.62, -2.66, -2.7, -2.74,
                               -2.78, -2.82, -2.86, -2.89, -2.93, -2.96, -3.0, -3.03, -3.06, -3.09, -3.12, -3.15, -3.18,
                               -3.21, -3.24, -3.27, -3.29, -3.32, -3.34, -3.36, -3.39, -3.41, -3.43, -3.45, -3.47,
                               -3.49, -3.5, -3.52, -3.54, -3.55, -3.57, -3.58, -3.59, -3.6, -3.62, -3.63, -3.64, -3.64,
                               -3.65, -3.66, -3.67, -3.67, -3.68, -3.68, -3.68, -3.68, -3.69, -3.69, -3.69, -3.69,
                               -3.68, -3.68, -3.68, -3.67, -3.67, -3.66, -3.66, -3.65, -3.64, -3.63, -3.62, -3.61, -3.6,
                               -3.59, -3.57, -3.56, -3.55, -3.53, -3.52, -3.5, -3.48, -3.46, -3.44, -3.42, -3.4, -3.38,
                               -3.36, -3.33, -3.31, -3.28, -3.26, -3.23, -3.2, -3.17, -3.14, -3.11, -3.08, -3.05, -3.02,
                               -2.99, -2.95, -2.91, -2.88, -2.84, -2.8, -2.77, -2.73, -2.69, -2.65, -2.6, -2.56, -2.52,
                               -2.47, -2.43, -2.38, -2.34, -2.29, -2.24, -2.19, -2.14, -2.09, -2.03, -1.98, -1.93,
                               -1.87, -1.82, -1.76, -1.7, -1.65, -1.59, -1.53, -1.47, -1.4, -1.34, -1.28, -1.21, -1.15,
                               -1.08, -1.02, -0.95, -0.88, -0.81, -0.74, -0.67, -0.59, -0.52, -0.45, -0.37, -0.29,
                               -0.22, -0.14, -0.06, 0.02, 0.1, 0.18, 0.27, 0.35, 0.43, 0.52, 0.61, 0.69, 0.78, 0.87,
                               0.96, 1.05, 1.15, 1.24, 1.33, 1.43, 1.53, 1.62, 1.72, 1.82, 1.92, 2.02, 2.12, 2.23, 2.33,
                               2.44, 2.54, 2.65, 2.76, 2.87, 2.98, 3.09, 3.2, 3.32, 3.43, 3.55, 3.66, 3.78, 3.9, 4.02,
                               4.14, 4.26, 4.38, 4.51, 4.63, 4.76, 4.89, 5.02, 5.15, 5.28, 5.41, 5.54, 5.68, 5.81, 5.95,
                               6.08, 6.22, 6.36, 6.5, 6.65, 6.79, 6.93, 7.08, 7.23, 7.37, 7.52, 7.67, 7.82, 7.98, 8.13,
                               8.29, 8.44, 8.6, 8.76, 8.92, 9.08, 9.24, 9.41, 9.57, 9.74, 9.9, 10.07, 10.24, 10.41,
                               10.59, 10.76, 10.93, 11.11, 11.29, 11.47, 11.65, 11.83, 12.01, 12.19, 12.38, 12.57,
                               12.75, 12.94, 13.13, 13.33, 13.52]
                              ]).T
                '''
                m = np.array([[0, 1.135031085, 2.269053334, 3.400783524, 4.531520444, 5.659983052, 6.787467792, 7.913981199, 9.038245462, 10.16155358, 11.28391201, 12.40404609, 13.52196544, 14.64023753, 15.7563097, 16.87019144, 17.98444379, 19.09652032, 20.20643034, 21.31545588, 22.42360312, 23.53087822, 24.63601753, 25.73903013, 26.84246067, 27.94377859, 29.04299282, 30.14264211, 31.24020162, 32.33568013, 33.43161064, 34.52547387, 35.61727849, 36.70829247, 37.79852166, 38.88797188, 39.97539224, 41.062047, 42.1479419, 43.23182862, 44.31496868, 45.39611542, 46.47778007, 47.55746442, 48.63517663, 49.71342278, 50.78970965, 51.86404525, 52.9389307, 54.01187757, 55.08413876, 56.15447557, 57.22413923, 58.29313519, 59.36146889, 60.42790464, 61.49369048, 62.55883177, 63.62209503, 64.68472595, 65.74672985, 66.80687536, 67.86764186, 68.92656198, 69.98364312, 71.04136031, 72.09725038, 73.15255309, 74.20604182, 75.26018606, 76.312528, 77.36430462, 78.41429188, 79.46372536, 80.51261017, 81.56095139, 82.60875409, 83.65479734, 84.70031343, 85.7453074, 86.78856008, 87.83130185, 88.87353771, 89.91527261, 90.95651153, 91.99603818, 93.03507987, 94.07364155, 95.11050854, 96.14812543, 97.18405854, 98.21953227, 99.25455151, 100.2879042, 101.3208132, 102.3532832, 103.385319, 104.4169256, 105.4468932, 106.477656, 107.5067904, 108.5343027, 109.5626238, 110.5893333, 111.6168601, 112.6427856, 113.6683264, 114.6922771, 115.7170631, 116.7402692, 117.7631103, 118.7855909, 119.8077157, 120.8282818, 121.8497094, 122.8695883, 123.8891307, 124.9083413, 125.926019, 126.94458, 127.961618, 128.9795477, 129.9959643, 131.0120773, 132.0266876, 133.0422071, 134.0562338, 135.071178, 136.0846391, 137.0978244, 138.1107382, 139.1233852, 140.134569, 141.146696, 142.1573694, 143.1689943, 144.1791751, 145.1891164, 146.1988227, 147.2070996, 148.2163495, 149.2253776, 150.2329905, 151.240391, 152.2487811, 153.2557698, 154.2625595, 155.2691543, 156.2755589, 157.2805811, 158.2866183, 159.2912824, 160.2969697, 161.3012931, 162.3066482, 163.3106484, 164.3144936, 165.3181882, 166.3217365, 167.3251429, 168.3284117, 169.3315472, 170.3333599, 171.3362421, 172.339004, 173.3404565, 174.3429911, 175.3442251, 176.3465496, 177.3475824, 178.3485211, 179.3505629, 180.3513263, 181.3520085, 182.3526138, 183.3543391, 184.3548035, 185.355204, 186.3555448, 187.3558303, 188.3560647, 189.3562522, 190.3563973, 191.3565042, 192.3565772, 193.3566206, 194.3566386, 195.3566356, 196.3566159, 197.3565837, 198.3565433, 199.356499, 200.3564551, 201.356416, 202.3563858, 203.3563688, 204.3563695, 205.356392, 206.3576325, 207.3577116, 208.3578254, 209.3579782, 210.3593665, 211.3596103, 212.359906, 213.3614502, 214.3618626, 215.3635323, 216.3640787, 217.3658912, 218.3677815, 219.3685611, 220.37062, 221.3727698, 222.3750147, 223.3773591, 224.3798072, 225.3823635, 226.386226, 227.3890116, 228.3919184, 229.3961448, 230.3993069, 231.4037977, 232.4084273, 233.4132, 234.4181203, 235.4231924, 236.4284208, 237.4338098, 238.4405596, 239.4462832, 240.4533767, 241.4606488, 242.4681039, 243.4757463, 244.4835805, 245.4916108, 246.5010393, 247.5094755, 248.5193192, 249.5293773, 250.5396541, 251.5501543, 252.5608821, 253.5718421, 254.5842384, 255.5968763, 256.6097604, 257.6228951, 258.6362849, 259.6499344, 260.6650495, 261.6804338, 262.6960919, 263.7120283, 264.7282476, 265.7459575, 266.7627565, 267.7810558, 268.7996569, 269.819769, 270.8389877, 271.8597274, 272.8807879, 273.9021739, 274.92389, 275.9471478, 276.9695385, 277.9934809, 279.0177728, 280.0436274, 281.0686328, 282.0952111, 283.1221585, 284.1506899, 285.1783901, 286.2076847, 287.2373683, 288.2686575, 289.2991336, 290.331226, 291.3637273, 292.3966423, 293.4311904, 294.4661629, 295.5015646, 296.5386164, 297.5748917, 298.6128277, 299.6524311, 300.6912721, 301.7317913, 302.7727761, 303.8154511, 304.8573823, 305.9010148, 306.9463554, 307.9909665, 309.0372968, 310.0853531, 311.1326944, 312.181773, 313.2313707, 314.2827182, 315.3345961, 316.3870097, 317.4399641, 318.4946925, 319.5512021, 320.6070411, 321.6646729, 322.7228739, 323.782881, 324.8434691, 325.9046435, 326.9676431, 328.0312411, 329.0954426, 330.1614889, 331.2281508, 332.296671, 333.3658192, 334.4356008, 335.5072606, 336.5795661, 337.6525229, 338.727378, 339.8028968, 340.8803282, 341.9584359, 343.0372257, 344.1179486, 345.2006125, 346.2827315, 347.3668045, 348.4528396, 349.5395956, 350.6270781, 351.7165441, 352.8067499, 353.8989541, 354.9919115, 356.0868825, 357.1826201, 358.2791301, 359.3776759, 360.4782661, 361.5796501, 362.6818341, 363.786085, 364.8911497, 365.9982972, 367.1062726, 368.2163468, 369.327263, 370.4402942, 371.5541818, 372.6702008, 373.7870906, 374.9061283, 376.0260516, 377.1468666, 378.2711274, 379.3950222, 380.5223817, 381.6493881, 382.7798785, 383.9100289, 385.0436827, 386.1782908, 387.3138598, 388.4516797, 389.590476, 390.7315411, 391.8748849, 393.0192299, 394.1658719, 395.3135311, 396.4635056, 397.6145134, 398.7678551, 399.9235411, 401.0802862],
                              [15.19729822 , 15.01843446 , 14.83957276 , 14.66190548 , 14.48662494 , 14.31134631 , 14.13845427 , 13.96556405 , 13.79506026 , 13.62575052 , 13.45644245 , 13.28952062 , 13.12379265 , 12.95925851 , 12.79591812 , 12.63377146 , 12.47281845 , 12.31305906 , 12.15449324 , 11.99592872 , 11.8397499 , 11.68476451 , 11.5309725 , 11.37837384 , 11.22696847 , 11.07675637 , 10.92773748 , 10.77991177 , 10.6332792 , 10.48783974 , 10.34359334 , 10.20053997 , 10.0574875 , 9.916820093 , 9.777345617 , 9.637871955 , 9.500783243 , 9.363695296 , 9.228992222 , 9.094289866 , 8.960780265 , 8.82846339 , 8.698531248 , 8.568599735 , 8.439860866 , 8.311122598 , 8.184768945 , 8.059607861 , 7.935639321 , 7.811671304 , 7.688895794 , 7.568504758 , 7.448114192 , 7.328916068 , 7.210910365 , 7.094097063 , 6.977284176 , 6.862855622 , 6.748427453 , 6.636383571 , 6.524340047 , 6.41348882 , 6.303829875 , 6.195363195 , 6.086896827 , 5.980814633 , 5.874732728 , 5.769843032 , 5.666145533 , 5.563640216 , 5.462327067 , 5.361014159 , 5.260893399 , 5.161964775 , 5.064228276 , 4.967683888 , 4.872331601 , 4.776979505 , 4.682819492 , 4.591043448 , 4.498075677 , 4.407491856 , 4.316908189 , 4.228708449 , 4.140508851 , 4.053501274 , 3.966493828 , 3.881870272 , 3.797246835 , 3.713815392 , 3.631575935 , 3.549336583 , 3.469481079 , 3.38962567 , 3.310962224 , 3.232298865 , 3.156019326 , 3.079739866 , 3.004652348 , 2.930756766 , 2.856861253 , 2.78534953 , 2.713837867 , 2.642326265 , 2.573198437 , 2.504070663 , 2.436134796 , 2.369390834 , 2.303838772 , 2.238286753 , 2.173926628 , 2.110758396 , 2.047590199 , 1.98561389 , 1.924829464 , 1.865236919 , 1.806836253 , 1.748435614 , 1.691226848 , 1.634018107 , 1.579193085 , 1.524368083 , 1.469543101 , 1.417101831 , 1.364660578 , 1.313411187 , 1.263353657 , 1.213296141 , 1.164430482 , 1.116756681 , 1.070274735 , 1.023792798 , 0.978502716 , 0.933212642 , 0.890306264 , 0.847399893 , 0.804493528 , 0.763970857 , 0.72344819 , 0.684117372 , 0.644786558 , 0.607839434 , 0.570892314 , 0.533945196 , 0.499381767 , 0.46481834 , 0.430254915 , 0.398075177 , 0.365895441 , 0.334907548 , 0.303919657 , 0.274123609 , 0.245519403 , 0.216915199 , 0.190694679 , 0.16447416 , 0.138253641 , 0.113224964 , 0.089388129 , 0.066743136 , 0.044098143 , 0.022644993 , 0.002383683 , -0.017877626 , -0.036947093 , -0.054824719 , -0.072702345 , -0.089388129 , -0.104882072 , -0.120376014 , -0.133486274 , -0.147788375 , -0.159706792 , -0.17162521 , -0.182351786 , -0.193078363 , -0.202613097 , -0.21095599 , -0.219298883 , -0.225258092 , -0.232409143 , -0.23717651 , -0.241943878 , -0.245519403 , -0.249094929 , -0.251478613 , -0.252670455 , -0.252670455 , -0.252670455 , -0.251478613 , -0.250286771 , -0.246711245 , -0.244327562 , -0.239560194 , -0.234792827 , -0.228833617 , -0.221682566 , -0.214531515 , -0.206188623 , -0.19784573 , -0.187119154 , -0.176392577 , -0.165666001 , -0.153747584 , -0.140637324 , -0.126335223 , -0.112033122 , -0.096539179 , -0.079853395 , -0.063167611 , -0.045289985 , -0.026220518 , -0.00715105 , 0.014302101 , 0.03456341 , 0.057208402 , 0.079853395 , 0.10369023 , 0.127527065 , 0.152555742 , 0.178776261 , 0.206188623 , 0.233600985 , 0.26220519 , 0.290809396 , 0.321797286 , 0.352785178 , 0.383773072 , 0.417144651 , 0.450516233 , 0.483887816 , 0.519643087 , 0.555398361 , 0.59234548 , 0.629292603 , 0.668623415 , 0.707954231 , 0.747285052 , 0.788999565 , 0.830714084 , 0.872428609 , 0.916526828 , 0.960625054 , 1.005915133 , 1.051205221 , 1.098879008 , 1.146552805 , 1.195418459 , 1.244284125 , 1.29434165 , 1.345591035 , 1.398032282 , 1.450473546 , 1.504106674 , 1.558931669 , 1.613756683 , 1.670965417 , 1.728174173 , 1.785382954 , 1.844975461 , 1.904567996 , 1.965352411 , 2.02732871 , 2.089305042 , 2.152473262 , 2.216833374 , 2.282385379 , 2.347937427 , 2.414681374 , 2.482617226 , 2.551744984 , 2.620872795 , 2.692384381 , 2.763896025 , 2.83540773 , 2.909303223 , 2.983198785 , 3.058286282 , 3.13456572 , 3.210845237 , 3.289508572 , 3.368171994 , 3.448027378 , 3.52907473 , 3.610122181 , 3.69236161 , 3.775793025 , 3.860416432 , 3.946231839 , 4.032047371 , 4.1202468 , 4.208446367 , 4.296646074 , 4.387229706 , 4.479005386 , 4.570781228 , 4.663749131 , 4.757909108 , 4.853261167 , 4.948613415 , 5.04634967 , 5.144086132 , 5.243014716 , 5.343135435 , 5.444448301 , 5.545761407 , 5.649458603 , 5.75315606 , 5.858045712 , 5.964127573 , 6.071401657 , 6.179867981 , 6.288334616 , 6.399185461 , 6.510036643 , 6.622080123 , 6.735315916 , 6.849744041 , 6.965364517 , 7.080985392 , 7.198990621 , 7.31699628 , 7.437386342 , 7.557776867 , 7.679359853 , 7.802135324 , 7.926103301 , 8.051263808 , 8.177616869 , 8.305162507 , 8.432708725 , 8.562639589 , 8.692571073 , 8.824887268 , 8.957204125 , 9.090713707 , 9.225416044 , 9.361311164 , 9.49959117 , 9.637871955 , 9.777345617 , 9.918012186 , 10.0598717 , 10.20173208 , 10.34597757 , 10.49141611 , 10.63804772 , 10.78587246 , 10.93489036 , 11.0839093 , 11.23531362 , 11.38791122 , 11.54170214 , 11.69668642 , 11.8516719 , 12.00904303 , 12.16760765 , 12.32736582 , 12.48831757 , 12.65046296 , 12.81380204 , 12.97833485 , 13.14406146 , 13.3109819 , 13.47909625 , 13.64840454 , 13.81890684 , 13.99060321 , 14.16468605 , 14.33877074 , 14.51524204 , 14.69171529 , 14.87057531 , 15.05062978 , 15.23187879 , 15.41432239 , 15.59796065 , 15.78279365 , 15.96882145 , 16.15723664 , 16.34565428 , 16.5364595 , 16.72845985 , 16.92165542]
                              ]).T

            else:
                assert False, "Error: no known Fenix dimensions %d" % image.xdim()

            # flip x-axis correction if camera was mounted backwards
            if kwds.get("flip", False):
                m[:, 1] *= -1

            # convert to displacement vectors
            dmap = np.zeros((image.data.shape[0], image.data.shape[1], 2))
            dmap[:, :, 0] += -m[:, None, 1]  # displacements in x
            dmap[:, :, 0] -= np.min(-m[:, 1])  # avoid negative displacements
            dmap[:, :, 1] += (m[:, 0] - np.arange(image.data.shape[0]))[:, None]  # displacements in y

            # calculate width/height of corrected image
            width = int(image.data.shape[1] + np.max(m[:, 1]) - np.min(m[:, 1]))
            height = int(np.ceil(np.max(m[:, 0])))

            # resize displacement map to output dimensions
            dmap = cv2.resize(dmap, (width, height), cv2.INTER_LINEAR)

            # use displacement vectors to calculate mapping from output coordinates to original coordinates
            xx, yy = np.meshgrid(range(dmap.shape[1]), range(dmap.shape[0]))
            idx = np.dstack([xx, yy]).astype(np.float32)
            idx[:, :, 0] -= dmap[:, :, 0]
            idx[:, :, 1] -= dmap[:, :, 1]

            # apply remapping
            if image.data.shape[-1] < 512:  # open-cv cannot handle more than 512 bands at a time
                remap = cv2.remap(image.data, idx, None, cv2.INTER_LINEAR)
            else:  # we need to split into different stacks with < 512 bands and then recombine
                remap = []
                mn = 0
                mx = 500
                while mn < image.data.shape[-1]:
                    if mx > image.data.shape[-1]:
                        mx = image.data.shape[-1]

                    # apply mapping to slice of bands
                    remap.append(cv2.remap(image.data[:, :, mn:mx], idx, None, cv2.INTER_LINEAR))

                    # get next slice
                    mn = mx
                    mx += 500

                # stack
                remap = np.dstack(remap)

            image.data = remap
            if verbose: print("DONE.")

        # rotate image so that scanning direction is horizontal rather than vertical)
        image.data = np.rot90(image.data)  # np.transpose(remap, (1, 0, 2))
        image.data = np.flip(image.data, axis=1)

    @classmethod
    def correct_folder(cls, path, **kwds):

        """
        Many sensors use simple/common data structures to store data/headers/dark reference etc. Hence it is often easiest
        to pass an output folder to the sensor for correction.

        *Arguments*:
         - path = a path to the folder containing the sensor specific data.

        *Keywords*:
         - verbose = True if print outputs should be made to update progress. Default is True.
         - calib = Calibration spectra for any white references found.
         - other keywords are passed directly to correct_image.

        *Returns*:
         - a hyImage to which all sensor-specific corrections have been applied. Note that this will generally not include
           topographic or atmospheric corrections.

        """
        verbose = kwds.get("verbose", True)
        kwds["verbose"] = verbose

        imgs = [str(p) for p in Path(path).rglob("capture/*.hdr")]  # all image files [including data]
        dark = [str(p) for p in Path(path).rglob("capture/DARKREF*.hdr")]  # dark reference file
        white = [str(p) for p in Path(path).rglob("capture/WHITEREF*.hdr")]  # an white reference data (core scanner)
        refl = [str(p) for p in Path(path).rglob("capture/REFL*.hdr")]  # any processed reflectance data (SiSu Rock)
        for d in dark:
            del imgs[imgs.index(d)]
        for w in white:
            del imgs[imgs.index(w)]
        for r in refl:
            del imgs[imgs.index(r)]

        if len(imgs) > 1 or len(
            dark) > 1: assert False, "Error - multiple scenes found in folder. Double check file path..."
        if len(imgs) == 0 or len(
            dark) == 0: assert False, "Error - no image or dark calibration found in folder. Double check file path... %s" % path

        if verbose: print('\nLoading image %s' % imgs[0])

        # load image
        image = io.loadWithGDAL(imgs[0])
        Fenix.set_dark_ref(dark[0])
        if len(white) > 0:  # white reference exists
            Fenix.set_white_ref(white[0])

        # correct
        Fenix.correct_image(image, **kwds)

        # return corrected image
        return image
